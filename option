#http://help.rmetrics.org/fOptions/BinomialTreeOptions.html
#http://userpages.umbc.edu/~gobbert/papers/PopuriEtAl_Binomial.pdf
#http://personal.strath.ac.uk/d.j.higham/Plist/P46.pdf
#http://comisef.eu/files/wps008.pdf
#http://computationalfinance.lsi.upc.edu/?page_id=83
#http://www.econ-pol.unisi.it/fm10/greeksBS.pdf
#http://banach.millersville.edu/~bob/book/Greeks/main.pdf
#http://www.kellogg.northwestern.edu/faculty/thompsnt/htm/d48/ftp/option_pricing_hedging.pdf
#http://www2.warwick.ac.uk/fac/sci/maths/people/staff/oleg_zaboronski/fm/trinomial_tree_2010_kevin.pdf

http://www.fam.tuwien.ac.at/~sgerhold/pub_files/sem12/s_sibetz_nowak.pdf
http://www.diva-portal.org/smash/get/diva2:239424/FULLTEXT01.pdf
http://www.quantstart.com/articles/Heston-Stochastic-Volatility-Model-with-Euler-Discretisation-in-C
http://models.cliffordang.com/
http://onlinelibrary.wiley.com/book/10.1002/9781119990079
http://economics.handels.gu.se/digitalAssets/1342/1342760_mscthesisl--vgrenkjellin.pdf
http://wwwf.imperial.ac.uk/~ajacquie/IC_Volatility/IC_Volatility_Docs/HestonPricing.pdf
https://quantessence.files.wordpress.com/2012/06/hestonoptionsprice.pdf
http://khrapovs.github.io/finmetrix/blog/2014/04/21/particle-filter-heston/
http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1107934
https://beggsmontecarlo.wordpress.com/2010/12/08/estimating-parameters-the-heston-model-and-more/
https://phps.portals.mbs.ac.uk/Portals/49/docs/20110627_SV_Heston.pdf
http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2359695
http://bfi.cl/papers/Mikhailov%20Nogel%202003%20-%20Heston's%20stochastic%20volatility%20Model%20implementation%20calibration%20and%20some%20extensions.pdf
http://math.nyu.edu/~atm262/fall06/compmethods/a1/nimalinmoodley.pdf
http://artax.karlin.mff.cuni.cz/r-help/library/NMOF/html/callHestoncf.html
http://www.cmi.ac.in/~shariq/Shariq%20files/option_pricing.pdf
http://www.ie.boun.edu.tr/~hormannw/BounQuantitiveFinance/Thesis/coskan.pdf
http://www.rinfinance.com/agenda/2011/StefanoIacus.pdf
http://ese.wustl.edu/ContentFiles/Research/UndergraduateResearch/CompletedProjects/WebPages/fl08/AlexGillula/Alex%20Gillula%20SeniorDesignPaper.pdf
http://www.r-bloggers.com/most-profitable-hedge-fund-style/
http://www.rinfinance.com/RinFinance2009/presentations/PresentationChicago24_04_2009.pdf
NDX 150619P04415000-SMART-OPT-USD
150619P04400000-NASDAQ-OPT
NDX150508P04240000-SMART-OPT-USD

NDX.OPT <- getOptionChain("^NDX")

fOption
bv <- CRRBinomialTreeOption(TypeFlag = "pa", S = 4350, X = 4500,Time = 3/12, r = 0.1, b = 0.1, sigma = 0.4, n = 5)
*****
S_0 = 100, V_0 = 0.04, sigma = 0.1, kappa = 3, theta = 0.04, rho = -0.1.
stockprob(100,0.04,0.1,3,0.04,0.1,1,1)
stockProb <- function(v0,vt,yt,sigma,kappa,rho,delT)
{
  muY <- (rho/sigma*kappa-0.5)*vt
  sigmayt <- sqrt(1-rho^2)*sqrt(vt)
  sigmay0 <- sqrt(1-rho^2)*sqrt(v0)
  if(vt > 0)
  {
    k <- ceiling(sqrt(vt/v0))
  }
  else
  {
    k <- 1
  }

  I <- round(muY/k/sigmay0*sqrt(delT))
  yu <- yt + (I+1)*k*sigmay0*sqrt(delT)
  ym <- yt + I*k*sigmay0*sqrt(delT)
  yd <- yt + (I-1)*k*sigmay0*sqrt(delT)  
  eu <- yu - yt - muY*delT
  em <- ym - yt - muY*delT
  ed <- yd - yt - muY*delT
  pu <- 0.5*(sigmayt^2*delT + em*ed)/k^2/sigmay0^2/delT
  pm <- -(sigmayt^2*delT + eu*ed)/k^2/sigmay0^2/delT
  pd <- 0.5*(sigmayt^2*delT +eu*em)/k^2/sigmay0^2/delT  
  ps <- c(pu,pm,pd)
  ps
}


###OPTION price calculation 
## Black-Scholes Call Option Price (No Dividend)
cop <- function(s,x,t,r){ 
sp <- get.hist.quote(instrument = s,start=(Sys.Date()-128), quote="Close")
sp <- ts(sp)
sp1 <- sp[1:(length(sp)-1)] 
sp2 <- sp[2: length(sp)]
s.ret <- log(sp2/sp1)
sd <- sd(s.ret)
sigma <- sd*sqrt(252)
d1 <- (log((sp[length(sp),])/x) + (r + (sigma^2)/2)*(t/252))/(sigma*sqrt((t/252)))
d2 <- (log((sp[length(sp),])/x) + (r - (sigma^2)/2)*(t/252))/(sigma*sqrt((t/252)))
op <- sp[length(sp),]*pnorm(d1) - x*exp(-r*(t/252))*pnorm(d2)
op }

 ## Black-Scholes Put Option Price (No Dividend) 
pop <- function(s,x,t,r){
sp <- get.hist.quote(instrument = s,start=(Sys.Date()-128), quote="Close")
sp <- ts(sp)
sp1 <- sp[1:(length(sp)-1)]
sp2 <- sp[2: length(sp)]
s.ret <- log(sp2/sp1)
sd <- sd(s.ret)
sigma <- sd*sqrt(252)
d1 <- (log((sp[length(sp),])/x) + (r + (sigma^2)/2)*(t/252))/(sigma*sqrt((t/252)))
d2 <- (log((sp[length(sp),])/x) + (r - (sigma^2)/2)*(t/252))/(sigma*sqrt((t/252)))
op <- sp[length(sp),]*pnorm(d1) - x*exp(-r*(t/252))*pnorm(d2)
po <- op + x*exp(-r*(t/252)) - sp[length(sp),]
po }

To calculate prices for 50 strike price call and put options on RHT, with 30 days to maturity, and a 0.1% risk free rate.

> cop('rht', 50, 30, 0.001)
trying URL 'http://chart.yahoo.com/table.csv?s=rht&a=5&b=18&c=2011&d=9&e=23&f=2011&g=d&q=q&y=0&z=rht&x=.csv'

> pop('rht', 50, 30, 0.001)
trying URL 'http://chart.yahoo.com/table.csv?s=rht&a=5&b=18&c=2011&d=9&e=23&f=2011&g=d&q=q&y=0&z=rht&x=.csv'

####GETTING OPTION CHAIN
##https://www.google.com/finance/option_chain?q=NASDAQ:TQQQ
##http://www.nasdaq.com/symbol/sqqq/option-chain
##https://finance.yahoo.com/q/op?s=AAPL


library("RCurl", lib.loc="~/R/win-library/3.2")
library("jsonlite", lib.loc="~/R/win-library/3.2")
library("plyr", lib.loc="~/R/win-library/3.2")
install.packages("rjson")
library("rjson", lib.loc="~/R/win-library/3.2")

##
library("quantmod", lib.loc="~/R/win-library/3.2")
#Download from yahoo aapl.12<-getOptionChain("AAPL","2015-12",src='yahoo')
aapl.12<-getOptionChain("AAPL","2015-12")#12 for month Dec, change month to get all quotes in that month
aapl.12$Dec.18.2015$puts$Vol
AAPL.2015 <- getOptionChain("AAPL", "2015/2016")

##
### 
getOptionQuote <- function(symbol){
    output = list()
    url = paste('http://www.google.com/finance/option_chain?q=', symbol, '&output=json', sep = "")
    x = getURL(url)
    fix = fixJSON(x)
    json = fromJSON(fix)
    numExp = dim(json$expirations)[1]
    for(i in 1:numExp){
        # download each expirations data
        y = json$expirations[i,]$y
        m = json$expirations[i,]$m
        d = json$expirations[i,]$d
        expName = paste(y, m, d, sep = "_")
        if (i > 1){
            url = paste('http://www.google.com/finance/option_chain?q=', symbol, '&output=json&expy=', y, '&expm=', m, '&expd=', d, sep = "")
            json = fromJSON(fixJSON(getURL(url)))
        }
        output[[paste(expName, "calls", sep = "_")]] = json$calls
        output[[paste(expName, "puts", sep = "_")]] = json$puts
    }
    return(output)
}
 
fixJSON <- function(json_str){
    stuff = c('cid','cp','s','cs','vol','expiry','underlying_id','underlying_price',
     'p','c','oi','e','b','strike','a','name','puts','calls','expirations',
     'y','m','d')
 
     for(i in 1:length(stuff)){
        replacement1 = paste(',"', stuff[i], '":', sep = "")
        replacement2 = paste('\\{"', stuff[i], '":', sep = "")
        regex1 = paste(',', stuff[i], ':', sep = "")
        regex2 = paste('\\{', stuff[i], ':', sep = "")
        json_str = gsub(regex1, replacement1, json_str)
        json_str = gsub(regex2, replacement2, json_str)
     }
     return(json_str)
}

aapl_opt<-getOptionQuote("AAPL")
aapl_opt$`2015_12_4_calls`$strike
aapl_opt$`2015_12_4_calls`$vol
plot(aapl_opt$"2015_12_4_puts"$strike, aapl_opt$"2015_12_4_puts"$oi, type = "s", main = "Open Interest by Strike")

### NOt working
fixJSON <- function(json){gsub('([^,{:]+):', '"\1":', json)}
URL1<-'http://www.google.com/finance/option_chain?q=%s&output=json'
URL2<-'http://www.google.com/finance/option_chain?q=%s&output=json&expy=%d&expm=%d&expd=%d'
getOptionQuotes <- function(symbol){
url<-sprintf(URL1, symbol)
chain<-fromJSON(fixJSON(getURL(url)))
options<-mlply(chain$expirations, function(y, m, d) {
url<-sprintf(URL2, symbol, y, m, d)
expiry<-fromJSON(fixJSON(getURL(url)))
expiry$calls$type<-"Call"
expiry$puts$type<-"Put"
prices<-rbind(expiry$calls, expiry$puts)
prices$expiry<-sprintf("%4d-%02d-%02d", y, m, d)
prices$underlying.price<-expiry$underlying_price
prices})
options<-cbind(data.frame(symbol), rbind.fill(options))
names(options)<-c("price", "bid", "ask", "open.interest")
for (col in c("strike", "price", "bid", "ask")) options[, col] = as.numeric(options[, col])
   options[, "open.interest"] = suppressWarnings(as.integer(options[, "open.interest"]))
   options[, c(1, 16, 15, 6, 10, 11, 17, 14, 12)]
 }


#### not working

library(rjson)
library(plyr)

getOptionChain <- function (symbol,exp = 14, type = "calls") {
        # symbol = "WMT"
        if( ! any(grepl(type, c("puts", "calls") ))){
                stop("ERROR: Third argument must be either 'calls' or 'puts'. Defaults to 'calls'.")
        }

        url <- "https://www.google.com/finance/option_chain?q="
        # url <- paste(url, symbol, "&expd=15&expm=01&expy=2016&output=json", sep="")
        url <- paste(url, symbol, "&output=json", sep="")

        #google.options.json <- readLines(url, warn = FALSE, )
        outfile = paste0(symbol, ".json")
        rv <- download.file(url, destfile = outfile, method="curl")
        warning(paste0("fetching url 1: ", url))

        google.options.json <-  readLines(outfile, warn = FALSE)
        options.json <- google.options.json
        options.json <- gsub("[{]", "{\"", options.json)
        options.json <- gsub("[:]", "\":", options.json)
        options.json <- gsub("[,] ", "$$$", options.json)
        options.json <- gsub("[,]", ",\"", options.json)
        options.json <- gsub("[,]\"[{]", ",{", options.json)
        options.json <- gsub("[$][$][$]", ", ", options.json)

        options.list <- fromJSON(options.json)

        #get the options chain without an expiry date and then determine longest option

        last.expiration <- length(options.list[["expirations"]])
        if ( exp>0 && exp< last.expiration) {
                last.expiration <-exp
        }
        month <- sprintf("%02d", options.list[["expirations"]][[last.expiration]]$m)
        day <- sprintf("%02d", options.list[["expirations"]][[last.expiration]]$d )
        year <- options.list[["expirations"]][[last.expiration]]$y

        #now request option chain for the longest expiry

        url <- "https://www.google.com/finance/option_chain?q="
        url <- paste(url, symbol, "&expd=", day, "&expm=", month, "&expy=", year, "&output=json", sep="")
        warning(paste0("fetching url 2: ", url))
        outfile2 = paste0(symbol, ".longest-expiry.json")
        rv <- download.file(url, destfile = outfile2, method="curl")

        google.options.json <- readLines(outfile2, warn = FALSE)

        options.json <- google.options.json
        options.json <- gsub("[{]", "{\"", options.json)
        options.json <- gsub("[:]", "\":", options.json)
        options.json <- gsub("[,] ", "$$$", options.json)
        options.json <- gsub("[,]", ",\"", options.json)
        options.json <- gsub("[,]\"[{]", ",{", options.json)
        options.json <- gsub("[$][$][$]", ", ", options.json)

        options.list <- fromJSON(options.json)

        options <- ldply (options.list[[type]], data.frame)
        options <- rename(options, c("s" = "contract.name",
                                     "p" = "price",
                                     "b" = "bid",
                                     "a" = "ask",
                                     "c" = "change",
                                     "cp" = "change.percentage",
                                     "oi" = "open.interest",
                                     "vol" = "volume"))
        options <- options[c( "contract.name",
                              "strike",
                              "price",
                              "change",
                              "change.percentage",
                              "bid",
                              "ask",
                              "volume",
                              "open.interest")]


        options$expiry <- paste(options.list[["expiry"]]$m, options.list[["expiry"]]$d, options.list[["expiry"]]$y, sep = "/")

        last.expiration <- length(options.list[["expirations"]])
        options$longest.available.expiry <- paste(options.list[["expirations"]][[last.expiration]]$m,
                                                  options.list[["expirations"]][[last.expiration]]$d,
                                                  options.list[["expirations"]][[last.expiration]]$y, sep = "/")

        options$underlying.price <- options.list[["underlying_price"]]

        return(options)
}


calls <- getOptionChain("GOOG", 12, "calls")
puts <- getOptionChain("GOOG", 12, "puts")

