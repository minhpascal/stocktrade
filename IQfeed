https://github.com/sobotklp/pyqfeed/blob/master/setup.py
https://github.com/luketighe/IQFeed/blob/master/iqfeed.py
https://github.com/bratchenko/docker-iqfeed
https://www.quantstart.com/articles/Downloading-Historical-Intraday-US-Equities-From-DTN-IQFeed-with-Python
https://github.com/macdice/iqfeed-debian

https://github.com/bwlewis/iqfeed

1. Loading wine 
http://www.tecmint.com/install-wine-on-ubuntu-and-linux-mint/
https://wiki.winehq.org/Ubuntu
http://askubuntu.com/questions/316025/how-to-install-and-configure-wine
cd /home/octo/.wine
$ sudo wine 'C:\Program Files\Internet Explorer\iexplore'
##First method
$ sudo add-apt-repository ppa:ubuntu-wine/ppa
$ sudo apt-get update
$ sudo apt-get install -y wine1.7
##Another method
sudo add-apt-repository ppa:ubuntu-wine/ppa -y && sudo apt-get update && sudo apt-get install wine
##To start the Wine program, you must give the full path to the .exe program
2. DOWNLOAD
iqsetup21021.exe or iqlink from DTN site
right click and run with wine
search computer and logo at dresktop
3.RUN
DTN.IQ and DTN Launcher
***PYTHON
"""
Credit: Michael Halls-Moore
Url:    https://www.quantstart.com/articles/Downloading-Historical-Intraday-US-
        Equities-From-DTN-IQFeed-with-Python
        
I simply wrapped the logic into a class. 
Will possibly extend for live feeds.
@author: Luke Patrick James Tighe
"""

import datetime
import socket
import os.path
import pandas as pd

"""
IQ DTN Feed Historical Symbol Download.
Downloads the symbol data in CSV format and stores it in a local directroy.
If we already have the symbol data downloaded, it will not hit IQ DTN Feed again,
it will simple use the local data.
To flush the local CSV file, simply delete the directory.
Constructor enables to specify a start and end date for the symbol data as well
as the frequency. Great for making sure data is consistent.
Simple usage example:
    from iqfeed import historicData
    dateStart = datetime.datetime(2014,10,1)
    dateEnd = datetime.datetime(2015,10,1)        
        
    iq = historicData(dateStart, dateEnd, 60)
    symbolOneData = iq.download_symbol(symbolOne)
    
"""
class historicData:

    # 
    def __init__(self, startDate, endDate, timeFrame=60):
        
        self.startDate = startDate.strftime("%Y%m%d %H%M%S")
        self.endDate = endDate.strftime("%Y%m%d %H%M%S")
        self.timeFrame = str(timeFrame)
        # We dont want the download directory to be in our source control
        self.downloadDir = "../../MarketData/"
        self.host = "127.0.0.1"  # Localhost
        self.port = 9100  # Historical data socket port

    def read_historical_data_socket(self, sock, recv_buffer=4096):
        """
        Read the information from the socket, in a buffered
        fashion, receiving only 4096 bytes at a time.
    
        Parameters:
        sock - The socket object
        recv_buffer - Amount in bytes to receive per read
        """
        buffer = ""
        data = ""
        while True:
            data = sock.recv(recv_buffer)
            buffer += data
    
            # Check if the end message string arrives
            if "!ENDMSG!" in buffer:
                break
       
        # Remove the end message string
        buffer = buffer[:-12]
        return buffer
        
    def download_symbol(self, symbol):
    
        # Construct the message needed by IQFeed to retrieve data
        #[bars in seconds],[beginning date: CCYYMMDD HHmmSS],[ending date: CCYYMMDD HHmmSS],[empty],[beginning time filter: HHmmSS],[ending time filter: HHmmSS],[old or new: 0 or 1],[empty],[queue data points per second]
        #message = "HIT,%s,%i,%s,%s,,093000,160000,1\n" % symbol, self.timeFrame, self.startDate, self.endDate
        #message = message = "HIT,%s,%s,20150101 075000,,,093000,160000,1\n" % symbol, self.timeFrame
    
        fileName = "{0}{1}-{2}-{3}-{4}.csv".format(self.downloadDir, symbol, self.timeFrame, self.startDate, self.endDate)
        exists = os.path.isfile(fileName)
        
        if exists == False:       
            
            message = "HIT,{0},'{1}',{2},{3},,093000,160000,1\n".format(symbol, self.timeFrame, self.startDate, self.endDate)
        
            # Open a streaming socket to the IQFeed server locally
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((self.host, self.port))
            
            sock.sendall(message)
            data = self.read_historical_data_socket(sock)
            sock.close
            
            # Remove all the endlines and line-ending
            # comma delimiter from each record
            data = "".join(data.split("\r"))
            data = data.replace(",\n","\n")[:-1]
    
            # Write the data stream to disk
            
            f = open(fileName, "w")
            f.write(data)
            f.close()
            
        return pd.io.parsers.read_csv(fileName, header=0, index_col=0, names=['datetime','open','low','high','close','volume','oi'], parse_dates=True)
*****
import sys
import socket
def read_historical_data_socket(sock, recv_buffer=4096):
    """
    Read the information from the socket, in a buffered
    fashion, receiving only 4096 bytes at a time.

    Parameters:
    sock - The socket object
    recv_buffer - Amount in bytes to receive per read
    """
    buffer = ""
    data = ""
    while True:
        data = sock.recv(recv_buffer)
        buffer += data

        # Check if the end message string arrives
        if "!ENDMSG!" in buffer:
            break

    # Remove the end message string
    buffer = buffer[:-12]
    return buffer

if __name__ == "__main__":
    # Define server host, port and symbols to download
    host = "127.0.0.1"  # Localhost
    port = 9100  # Historical data socket port
    syms = ["SPY", "AAPL", "GOOG", "AMZN"]

    # Download each symbol to disk
    for sym in syms:
        print "Downloading symbol: %s..." % sym

        # Construct the message needed by IQFeed to retrieve data
        message = "HIT,%s,60,20140101 075000,,,093000,160000,1\n" % sym

        # Open a streaming socket to the IQFeed server locally
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((host, port))

        # Send the historical data request
        # message and buffer the data
        sock.sendall(message)
        data = read_historical_data_socket(sock)
        sock.close

        # Remove all the endlines and line-ending
        # comma delimiter from each record
        data = "".join(data.split("\r"))
        data = data.replace(",\n","\n")[:-1]

        # Write the data stream to disk
        f = open("/home/octo/Desktop/QTPY/data/%s.csv" % sym, "w")
        f.write(data)
        f.close()

******R
Example:
require(iqfeed)
iqConf()
t0 <- "2010-01-18 15:25:00"
t1 <- "2010-01-22 10:00:00"
trades <- HIT("MSFT",interval=60,start=t0,end=t1)

daily <- HDX("XOM",days=14)
daily

# Options chain lookup example
symbols <- CEO("MSFT")
symbols
 [1] "MSQ1022E25" "MSQ1022E26" "MSQ1022E27" "MSQ1022E28" "MSQ1022E29"
 [6] "MSQ1022E30" "MSQ1022E31" "MSQ1022E32" "MSQ1022E33" "MSQ1022E34"
[11] "MSQ1022E35" "MSQ1022Q25" "MSQ1022Q26" "MSQ1022Q27" "MSQ1022Q28"
[16] "MSQ1022Q29" "MSQ1022Q30" "MSQ1022Q31" "MSQ1022Q32" "MSQ1022Q33"
[21] "MSQ1022Q34" "MSQ1022Q35"

# Convert to standard OSI format (e.g., for use by a broker), and back:
osi(symbols[1])
[1] "MSQ   100522C00025000"
osi2iq(.Last.value)
[1] "MSQ1022E25"

library("iqfeed")
require(iqfeed)
iqConf()
t0 <- "2010-01-18 15:25:00"
t1 <- "2010-01-22 10:00:00"
trades <- HIT("MSFT",interval=60,start=t0,end=t1)
trades

daily <- HDX("XOM",days=14)
daily

# Options chain lookup example
symbols <- CEO("MSFT")
symbols

# Convert to standard OSI format (e.g., for use by a broker), and back:
osi(symbols[1])
osi2iq(.Last.value)
