#Installing IBPy
source activate PyAlgo#starting env
sudo apt-get install git-core# already installed for GIT
cd /home/octo/IBAPI_py# directory created 
git clone https://github.com/blampe/IbPy# download gitclone 
cd IbPy#(PyAlgo)octo@ALPHA:~/IBAPI_py/IbPy$
python setup.py install

#Another pack https://github.com/Komnomnomnom/swigibpy

python '/home/octo/Desktop/QTPY/qt.py'
# Automatic ordering code
from time import sleep
from ib.opt import Connection, message
from ib.ext.Contract import Contract
from ib.ext.Order import Order

def error_handler(msg):
    """Handles the capturing of error messages"""
    print "Server Error: %s" % msg

def reply_handler(msg):
    """Handles of server replies"""
    print "Server Response: %s, %s" % (msg.typeName, msg)

def print_portfolio_position(msg):
    print "Position:", msg.contract.m_symbol, msg.position, msg.marketPrice, msg.contract.m_currency, msg.contract.m_secType

def make_contract(symbol, sec_type, exch, prim_exch, curr):
    """
    symbol - The ticker symbol for the contract
    sec_type - The security type for the contract ('STK' is 'stock')
    exch - The exchange to carry out the contract on
    prim_exch - The primary exchange to carry out the contract on
    curr - The currency in which to purchase the contract"""

    Contract.m_symbol = symbol
    Contract.m_secType = sec_type
    Contract.m_exchange = exch
    Contract.m_primaryExch = prim_exch
    Contract.m_currency = curr
    return Contract



def make_order(action,quantity, price = None):
    """Create an Order object (Market/Limit) to go long/short.

    order_type - 'MKT', 'LMT' for Market or Limit orders
    quantity - Integral number of assets to order
    action - 'BUY' or 'SELL'"""

    if price is not None:
        order = Order()
        order.m_orderType = 'LMT'
        order.m_totalQuantity = quantity
        order.m_action = action
        order.m_lmtPrice = price

    else:
        order = Order()
        order.m_orderType = 'MKT'
        order.m_totalQuantity = quantity
        order.m_action = action


    return order


cid = 303

while __name__ == "__main__":

    conn = Connection.create(port=7496, clientId=123)
    #conn = Connection(port=7496,clientId=1234)
    conn.connect()
    # Assign the error handling function defined above
    # to the TWS connection
    conn.register(error_handler, 'Error')
    # Assign all of the server reply messages to the
    # reply_handler function defined above
    conn.registerAll(reply_handler)
    # Map server replies to "print_portfolio_position" function for "UpdatePortfolio" client requests
    conn.register(print_portfolio_position, 'UpdatePortfolio')
    conn.register(replies_handler, 'UpdateAccountValue')
    # Make client request for AccountUpdates (includes request for Portfolio positions)
    conn.reqAccountUpdates(1, '')
    # Stop client request for AccountUpdates
    conn.reqAccountUpdates(0, '')
    sleep(5)
    oid = cid
    cont = make_contract('SQQQ', 'STK', 'SMART', 'SMART', 'USD')
    #offer = make_order('BUY', 1, 200)
    offer = make_order('BUY', 1,'MKT')
    conn.placeOrder(oid, cont, offer)
    conn.disconnect()
    x = raw_input('enter to resend')
    cid += 1
******

# LOAD the ib.ext and ib.opt Libraries
from ib.ext.Contract import Contract
from ib.ext.Order import Order
from ib.opt import Connection, message

# DEFINE a basic function to capture error messages
def error_handler(msg):
    print "IB: Server Error = ", msg

# DEFINE a basic function to capture all server replies
def all_replies_handler(msg):
    print "IB: Server Response = ", msg.typeName, msg

# Main code

# Create the connection to IBGW with client socket id=123
# using a different method than ibConnection
ibgw_conTradeChannel=Connection.create(port=7496,clientId=1234)
ibgw_conTradeChannel.connect()

# Map server replies for "Error" messages to the "error_handler" function
ibgw_conTradeChannel.register(error_handler, 'Error')

# Map all server replies to "all_replies_handler"
# Use typeName to distinguish between the different message types
# This is easier than registering different actions for different messages
ibgw_conTradeChannel.registerAll(all_replies_handler)

# Create a global OrderID for simplicity
# It will be submitted to the IB Server for executing the trade
# To be incremented for the next trade with calls to the IB Server
newOrderID=1

# Create a contract object
# Update the parameters to be sent to the Market Order request
order_ticker = Contract()
order_ticker.m_symbol = 'GTAT'
order_ticker.m_secType = 'STK'
order_ticker.m_exchange = 'SMART'
order_ticker.m_primaryExch = 'SMART'
order_ticker.m_currency = 'USD'
order_ticker.m_localSymbol = 'GTAT'

# Create an order object
# Update the parameters to be sent to the Market Order request
order_desc = Order()
order_desc.m_minQty = 100
order_desc.m_lmtPrice = 11.00
order_desc.m_orderType = 'LMT'
order_desc.m_totalQuantity = 100
order_desc.m_action = 'SELL'

# Send the Market Order request
ibgw_conTradeChannel.placeOrder(newOrderID, order_ticker, order_desc)

print 'disconnected', ibgw_conTradeChannel.disconnect()

#https://www.quantstart.com/articles/Using-Python-IBPy-and-the-Interactive-Brokers-API-to-Automate-Trades
#http://www.elitetrader.com/et/index.php?threads/ib-api-howtos-and-guidelines-for-beginners.279658/page-5
#http://stackoverflow.com/questions/25299539/getting-parameters-of-listed-options-futures-in-interactive-brokers-api/34754857#34754857
#http://stackoverflow.com/questions/34561626/ibpy-getting-portfolio-information-interactive-broker-python/34755680#34755680
#https://www.quantopian.com/posts/ibpython3
